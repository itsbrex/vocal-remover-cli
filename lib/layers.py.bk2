import torch
from torch import nn
import torch.nn.functional as F

from lib import spec_utils


def complex_interpolate(x, size=None, scale_factor=None, mode='bilinear', align_corners=True):
    _, c, _, _ = x.size()
    h = torch.cat((x.real, x.imag), dim=1)
    h = F.interpolate(h, size=size, scale_factor=scale_factor, mode=mode, align_corners=align_corners)
    h = torch.complex(h[:, :c], h[:, c:])
    return h


class ComplexConv2D(nn.Module):

    def __init__(self, nin, nout, ksize=3, stride=1, pad=1, dilation=1):
        super(ComplexConv2D, self).__init__()
        self.conv_real = nn.Conv2d(
            nin, nout,
            kernel_size=ksize,
            stride=stride,
            padding=pad,
            dilation=dilation,
            bias=False
        )
        self.conv_imag = nn.Conv2d(
            nin, nout,
            kernel_size=ksize,
            stride=stride,
            padding=pad,
            dilation=dilation,
            bias=False
        )

    def __call__(self, x):
        h_real = self.conv_real(x.real) - self.conv_imag(x.imag)
        h_imag = self.conv_imag(x.real) + self.conv_real(x.imag)

        h = torch.complex(h_real, h_imag)

        return h


class ComplexConv2dBnActiv(nn.Module):

    def __init__(self, nin, nout, ksize=3, stride=1, pad=1, dilation=1, activ=nn.ReLU):
        super(ComplexConv2dBnActiv, self).__init__()
        self.conv_real = nn.Conv2d(
            nin, nout,
            kernel_size=ksize,
            stride=stride,
            padding=pad,
            dilation=dilation,
            bias=False
        )
        self.conv_imag = nn.Conv2d(
            nin, nout,
            kernel_size=ksize,
            stride=stride,
            padding=pad,
            dilation=dilation,
            bias=False
        )

        self.bn_real = nn.BatchNorm2d(nout)
        self.bn_imag = nn.BatchNorm2d(nout)

        self.activ = activ()

    def __call__(self, x):
        h_real = self.conv_real(x.real) - self.conv_imag(x.imag)
        h_imag = self.conv_imag(x.real) + self.conv_real(x.imag)

        h_real = self.bn_real(h_real)
        h_imag = self.bn_imag(h_imag)

        h_real = self.activ(h_real)
        h_imag = self.activ(h_imag)

        h = torch.complex(h_real, h_imag)

        return h


class ComplexDenseBnActive(nn.Module):

    def __init__(self, nin, nout, activ=nn.ReLU):
        super(ComplexDenseBnActive, self).__init__()
        self.dense_real = nn.Linear(nin, nout)
        self.dense_imag = nn.Linear(nin, nout)

        self.bn_real = nn.BatchNorm1d(nout)
        self.bn_imag = nn.BatchNorm1d(nout)

        self.activ = activ()

    def __call__(self, x):
        h_real = self.dense_real(x.real) - self.dense_imag(x.imag)
        h_imag = self.dense_imag(x.real) + self.dense_real(x.imag)

        h_real = self.bn_real(h_real)
        h_imag = self.bn_imag(h_imag)

        h_real = self.activ(h_real)
        h_imag = self.activ(h_imag)

        h = torch.complex(h_real, h_imag)

        return h


class ComplexAdaptiveAvgPool2d(nn.Module):

    def __init__(self, output_size):
        super(ComplexAdaptiveAvgPool2d, self).__init__()
        self.pool = nn.AdaptiveAvgPool2d(output_size)

    def __call__(self, x):
        _, c, _, _ = x.size()
        h = torch.cat((x.real, x.imag), dim=1)
        h = self.pool(h)
        h = torch.complex(h[:, :c], h[:, c:])

        return h


class ComplexDropout2d(nn.Module):

    def __init__(self, p):
        super(ComplexDropout2d, self).__init__()
        self.dropout = nn.Dropout2d(p)

    def __call__(self, x):
        _, c, _, _ = x.size()
        h = torch.cat((x.real, x.imag), dim=1)
        h = self.dropout(h)
        h = torch.complex(h[:, :c], h[:, c:])

        return h


class Encoder(nn.Module):

    def __init__(self, nin, nout, ksize=3, stride=1, pad=1, activ=nn.LeakyReLU):
        super(Encoder, self).__init__()
        self.conv1 = ComplexConv2dBnActiv(nin, nout, ksize, stride, pad, activ=activ)
        self.conv2 = ComplexConv2dBnActiv(nout, nout, ksize, 1, pad, activ=activ)

    def __call__(self, x):
        h = self.conv1(x)
        h = self.conv2(h)

        return h


class Decoder(nn.Module):

    def __init__(self, nin, nout, ksize=3, stride=1, pad=1, activ=nn.ReLU, dropout=False):
        super(Decoder, self).__init__()
        self.conv1 = ComplexConv2dBnActiv(nin, nout, ksize, stride, pad, activ=activ)
        # self.conv2 = Conv2DBNActiv(nout, nout, ksize, 1, pad, activ=activ)
        self.dropout = ComplexDropout2d(0.1) if dropout else None

    def __call__(self, x, skip=None):
        x = complex_interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)

        if skip is not None:
            skip = spec_utils.crop_center(skip, x)
            x = torch.cat([x, skip], dim=1)

        h = self.conv1(x)
        # h = self.conv2(h)

        if self.dropout is not None:
            h = self.dropout(h)

        return h


class ASPPModule(nn.Module):

    def __init__(self, nin, nout, dilations=(4, 8, 12), activ=nn.ReLU, dropout=False):
        super(ASPPModule, self).__init__()
        self.pool = ComplexAdaptiveAvgPool2d((1, None))

        self.conv1 = ComplexConv2dBnActiv(
            nin, nout, 1, 1, 0, activ=activ
        )
        self.conv2 = ComplexConv2dBnActiv(
            nin, nout, 1, 1, 0, activ=activ
        )
        self.conv3 = ComplexConv2dBnActiv(
            nin, nout, 3, 1, dilations[0], dilations[0], activ=activ
        )
        self.conv4 = ComplexConv2dBnActiv(
            nin, nout, 3, 1, dilations[1], dilations[1], activ=activ
        )
        self.conv5 = ComplexConv2dBnActiv(
            nin, nout, 3, 1, dilations[2], dilations[2], activ=activ
        )
        self.bottleneck = ComplexConv2dBnActiv(
            nout * 5, nout, 1, 1, 0, activ=activ
        )

        self.dropout = ComplexDropout2d(0.1) if dropout else None

    def forward(self, x):
        _, _, h, w = x.size()

        feat1 = self.pool(x)
        feat1 = self.conv1(feat1)
        feat1 = complex_interpolate(feat1, size=(h, w), mode='bilinear', align_corners=True)

        feat2 = self.conv2(x)
        feat3 = self.conv3(x)
        feat4 = self.conv4(x)
        feat5 = self.conv5(x)

        out = torch.cat((feat1, feat2, feat3, feat4, feat5), dim=1)
        out = self.bottleneck(out)

        if self.dropout is not None:
            out = self.dropout(out)

        return out


class LSTMModule(nn.Module):

    def __init__(self, nin_conv, nin_lstm, nout_lstm):
        super(LSTMModule, self).__init__()
        self.conv = ComplexConv2dBnActiv(nin_conv, 1, 1, 1, 0)
        self.lstm_real = nn.LSTM(
            input_size=nin_lstm,
            hidden_size=nout_lstm // 2,
            bidirectional=True
        )
        self.lstm_imag = nn.LSTM(
            input_size=nin_lstm,
            hidden_size=nout_lstm // 2,
            bidirectional=True
        )
        self.dense = ComplexDenseBnActive(nout_lstm, nin_lstm)

    def forward(self, x):
        N, _, nbins, nframes = x.size()

        h = self.conv(x)[:, 0]  # N, nbins, nframes
        h = h.permute(2, 0, 1)  # nframes, N, nbins

        h_real = self.lstm_real(h.real)[0] - self.lstm_imag(h.imag)[0]
        h_imag = self.lstm_imag(h.real)[0] + self.lstm_real(h.imag)[0]
        h = torch.complex(h_real, h_imag)

        h = self.dense(h.reshape(-1, h.size()[-1]))  # nframes * N, nbins
        h = h.reshape(nframes, N, 1, nbins)
        h = h.permute(1, 2, 3, 0)

        return h
